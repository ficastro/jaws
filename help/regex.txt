Regular expressions (regex) are powerful tools for pattern matching in strings. They consist of various symbols, rules, and modifiers that define how to match text. Here's an overview of the most commonly used regex rules, with examples:

### 1. **Basic Symbols**

- **`.`** (Dot):
  - Matches **any single character** except a newline.
  - Example: `a.c` matches `"abc"`, `"a1c"`, but not `"ac"` (because the dot expects exactly one character in between).
  
- **`^`** (Caret):
  - Matches the **start** of a string.
  - Example: `^Hello` matches `"Hello world"` but not `"Say Hello"`.

- **`$`** (Dollar sign):
  - Matches the **end** of a string.
  - Example: `world$` matches `"Hello world"`, but not `"world Hello"`.

- **`\`** (Escape character):
  - Used to escape special characters (like `.`, `^`, `$`, etc.) to match them literally.
  - Example: `\.` matches a literal dot (`.`) rather than any character.

### 2. **Character Classes**

- **`\w`**:
  - Matches any **word character**: `[A-Za-z0-9_]` (letters, digits, and underscores).
  - Example: `\w+` matches `"hello123"`, `"abc"`, or `"123"`.

- **`\W`**:
  - Matches any **non-word character** (anything not in `[A-Za-z0-9_]`).
  - Example: `\W+` matches spaces, punctuation, etc.

- **`\d`**:
  - Matches any **digit**: `[0-9]`.
  - Example: `\d+` matches `"123"` in `"foo123bar"`.

- **`\D`**:
  - Matches any **non-digit** character.
  - Example: `\D+` matches `"foo"` in `"foo123bar"`.

- **`\s`**:
  - Matches any **whitespace** character (spaces, tabs, newlines).
  - Example: `\s+` matches spaces in `"Hello world"`.

- **`\S`**:
  - Matches any **non-whitespace** character.
  - Example: `\S+` matches words in `"Hello world"`.

- **`[abc]`**:
  - Matches any **one character** inside the brackets (a, b, or c in this case).
  - Example: `b[aeiou]g` matches `"bag"`, `"beg"`, `"big"`, etc.

- **`[^abc]`**:
  - Matches any **character except** those inside the brackets.
  - Example: `[^a-z]` matches any non-lowercase letter.

### 3. **Quantifiers**

- **`*`** (Asterisk):
  - Matches **zero or more** occurrences of the preceding character or group.
  - Example: `a*b` matches `"b"`, `"ab"`, `"aab"`, etc.

- **`+`** (Plus):
  - Matches **one or more** occurrences of the preceding character or group.
  - Example: `a+b` matches `"ab"`, `"aab"`, but not `"b"`.

- **`?`** (Question mark):
  - Matches **zero or one** occurrence of the preceding character or group.
  - Example: `colou?r` matches `"color"` and `"colour"`.

- **`{n}`**:
  - Matches **exactly `n` occurrences** of the preceding character or group.
  - Example: `\d{3}` matches `"123"` but not `"12"`.

- **`{n,m}`**:
  - Matches **between `n` and `m` occurrences**.
  - Example: `\d{2,4}` matches `"12"`, `"123"`, and `"1234"` but not `"12345"`.

### 4. **Groups and Alternation**

- **`(abc)`**:
  - Defines a **group**. Allows you to apply quantifiers to the entire group, capture matched text, or use it for alternation.
  - Example: `(abc)+` matches `"abc"`, `"abcabc"`, etc.

- **`|`** (Alternation):
  - Acts as a logical **OR**.
  - Example: `a|b` matches `"a"` or `"b"`.

### 5. **Special Constructs**

- **`(?:...)`**:
  - **Non-capturing group**: Groups characters but does not capture the match for later use.
  - Example: `(?:abc){2}` matches `"abcabc"` without saving `"abc"` as a separate group.

- **`(?P<name>...)`**:
  - **Named capturing group**: Groups and captures text, and assigns it a name.
  - Example: `(?P<day>\d{2})-(?P<month>\d{2})-(?P<year>\d{4})` allows access to the matched day, month, and year using their names.

### 6. **Assertions**

- **`(?=...)`** (Positive lookahead):
  - Asserts that the pattern inside the parentheses **must follow** the current position.
  - Example: `\w+(?=\d)` matches `"abc"` in `"abc123"` (it asserts that digits must follow).

- **`(?!...)`** (Negative lookahead):
  - Asserts that the pattern inside the parentheses **must not follow** the current position.
  - Example: `\w+(?!\d)` matches `"abc"` in `"abc!"` (it asserts that digits must not follow).

- **`(?<=...)`** (Positive lookbehind):
  - Asserts that the pattern inside the parentheses **must precede** the current position.
  - Example: `(?<=\$)\d+` matches the number `"100"` in `"$100"` (it asserts that a `$` must precede).

- **`(?<!...)`** (Negative lookbehind):
  - Asserts that the pattern inside the parentheses **must not precede** the current position.
  - Example: `(?<!\$)\d+` matches numbers **not** preceded by a `$`.

### 7. **Anchors**

- **`\b`**:
  - Matches a **word boundary** (the position between a word character and a non-word character).
  - Example: `\bword\b` matches `"word"` but not `"sword"` or `"wordplay"`.

- **`\B`**:
  - Matches **non-word boundaries**.
  - Example: `\Bword\B` matches `"swordplay"` but not `"word"`.

### Example Use Cases

1. **Email validation**:
   - Pattern: `\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b`
   - Matches valid email addresses like `example@test.com`.

2. **Date matching**:
   - Pattern: `\d{2}/\d{2}/\d{4}`
   - Matches dates like `12/05/2024`.

3. **Phone number matching**:
   - Pattern: `\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}`
   - Matches phone numbers like `123-456-7890`, `(123) 456-7890`, `123.456.7890`.

### Testing Regular Expressions
You can experiment and test regular expressions using online tools like:
- [regex101](https://regex101.com/)
- [RegExr](https://regexr.com/)

These tools allow you to input patterns and see the matching process in real-time, which can help in understanding and building complex regex expressions.



Makes the pattern case-insensitive (ignores case).	(?i)
^ and $ match the start and end of each line (not just the entire string).	(?m)
Makes . match newline characters (\n) as well.	(?s)